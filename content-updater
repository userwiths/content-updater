save_fln=".update.conf"
save_dir="~/Download"
pac_manager=""

#HELP message
print_help(){
    echo -e "Usage:$0 | update [git,web,all] <----> Updates Either All Found git Repositories or All Files Downloaded And saved Into $save_fln.\n\t\t | download url <----> Downloads A File from given Url And Saves Its Info For Updating.\n\t\t | delete [git,url] <----> Deletes All Downloaded Information About A given File Or Repository."
}

#Gets the default package manager for the distro.
get_pac_manager(){
    uname -a |grep -q "ARCH"
    if [ $? == 0 ];then
        pac_manager="pacman "
    else
        pac_manager="apt-get "
    fi
}

#Saves information/file and its info (sha1sum,name,url source) in the update.conf file.
save_info(){
    if [ $2 ];then
        check_if_file_needs_update $1 $2
        s_name=$2
        wget -q  $1 -O $s_name
        sha=$(sha1sum $s_name)
    else
        for i in $(seq 1 25);do
            cat $save_fln|grep -q "NewFile$i"
            if [ $? == 1 ];then
                s_name="NewFile$i"
                wget -q  $1 -O $s_name
                sha=$(sha1sum $s_name)
                break;
            fi
        done
    fi
    url=$1
    echo -e "$url\t$s_name\t${sha::40}" >> $save_fln
    echo "Saved New File:"
    echo -e "\tSource : $url\n\tFile Name : $s_name\n\tSha1Sum : ${sha::40}"
}

#The most common method for installation.
git_install(){
    ./configure
    make
    if [ $? == 1 ];then
        echo "Git Application $PWD needs manual installation !!!"
    fi
}

#Finds all git repositories in the /home directory and its subs and updates them.
git_update(){
    git_reps=$(find $1 -name .git -d)
    for e in "$git_reps";do
        cd $e
        cd ../
        git checkout
        git_install
    done
}

#Checks if a given file needs update.
check_if_file_needs_update(){
    
    #if [ "$(cat restrictions.conf)" == "*" ];then
    #    reg_change $1 $2
    #fi
    #cat restrictions.conf|grep "$2+" -q
    #if [ $? == 0 ];then
    #    reg_change $1 $2
    #fi
    #cat restrictions.conf|grep "$2-" -q
    #if [ $? == 0 ];then
    #    return
    #fi
    #if [ "$(cat restrictions.conf)" == "0" ];then
    #    return
    #fi
    ls -a |grep $2
    if [ $? == 1 ];then
        return
    fi
    wget $1 -O "TEMP_FILE" -q
    sha=$(sha1sum "TEMP_FILE")
    oldsha=$(sha1sum $2)
    ls | grep $2 -q
    if [ $? == 0 ];then
        if [ "${oldsha::40}" != "${sha::40}" ];then
            echo "File $2 was changed by a user ..."
            echo "Want to Download the original again ?"
            printf "[Y]es,[N]o,ne[V]er for this file." #,[A]bsolutely never for any file,a[L]ways for this file,al[W]ays for all : "
            read a
            case "$a" in 
                "y")force_update $1 $2
                    ;;
                "n")reg_change $1 $2
                    ;;
                #EXPERIMENTAL
                #"a")echo "*" >> restrictions.conf
                #    ;;
                #"v")echo "$2+" >> restrictions.conf
                #    ;;
                #"l")echo "$2-" >> restrictions.conf
                #    ;;
                #"w")echo "0" >> restrictions.conf
                #    ;;
                ###############
            esac
            rm "TEMP_FILE"
            exit
        fi
    fi
    cat $save_fln|grep -q "$1"
    if [ $? == 0 ];then
        cat $save_fln|grep -q "${sha::40}"
        if [ $? == 0 ];then
            echo "File $2 is present and up-to-date ... :D"
            rm "TEMP_FILE"
            exit
        else
            echo "Updating File $2 ..."
        fi
    else
        echo "File with this source never existed !!!"
        echo "Downloading now ..."
    fi
    rm "TEMP_FILE"
}

#Updates Every entry from the registry using the given source.
update_registered(){
    counter=0
    #READS THE REGISTRY IN FORMAT "URL_SOURCE   FILE_NAME   SHA1SUM"
    while read -r line;do
        for e in $line;do
            case $counter in
                0)url=$e
                ;;
                1)s_name=$e
                ;;
                2)sha=$e
                ;;
            esac
            counter=$(expr $counter + 1)
        done;
        counter=0
        #WAS CHANGED !!!
        if [ $url ];then
            new_sha=$(sha1sum $s_name)
            if [ "${new_sha::40}" != "$sha" ];then
                #IF SOMEONE/YOU HAVE CHANGED THE FILES CONTENT MANUALY
                echo "Updating File : $s_name ..."
                force_update $url $s_name 
            else
                #IF FILE ON SERVER HAS CHANGED
                wget $url -O "TEMP_FILE" -q
                new_sha=$(sha1sum "TEMP_FILE")
                new_sha="${new_sha::40}"
                if [ "$new_sha" != "$sha" ];then
                    echo "Youre Version Of the file is out of date !!!"
                    echo "Updating ..."
                    mv "TEMP_FILE" $s_name
                fi
                rm "TEMP_FILE"
            fi
        fi
    done<"$save_fln"
}

#Forcefully replace the version and change the register.
force_update(){
    rm $2
    wget $1 -O $2 -q
    reg_change $1 $2
}

#Only changes the register, will not affect the file.
reg_change(){
    echo > "update.conf.back"
    while read -r line;do
        echo $line|grep $1 -q
        if [ $? != 0 ];then
            echo "$line" >> "update.conf.back"
        fi
    done<$save_fln
    sha=$(sha1sum $2)
    echo -e "$1\t$2\t${sha::40}" >> "update.conf.back"
    mv "update.conf.back" $save_fln
}

#Deletes the file and its entry in the register.
delete(){
    echo > "update.conf.back"
    while read -r line;do
        echo $line|grep $1
        if [ $? == 0 ];then
            rm $1
        else
            echo "$line" >> "update.conf.back"
        fi
    done<$save_fln
    mv "update.conf.back" $save_fln
}

#Filters out the options given as arguments.
filter_options(){
    case "$1" in
        "update") case "$2" in 
                    "git") git_update "/home"
                        ;;
                    "web")
                           update_registered
                        ;;
                    "all") git_update "/home";
                           update_registered
                        ;;
                    esac
                ;;
        "delete") delete $2
                ;;
        "download") echo "$2" | grep "github"
                    if [ $? == 0 ];then
                        git clone $2
                    else
                        save_info $2 $3
                    fi
                ;;
    esac
}

########################################################
################    EXECUTION   ########################
########################################################

if [ $1 ];then
    get_pac_manager
    filter_options $1 $2 $3
    content=$(cat $save_fln|grep "\t")
    echo "$content" > $save_fln
else
    print_help
fi
